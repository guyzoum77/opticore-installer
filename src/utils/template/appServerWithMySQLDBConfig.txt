import RegisterRoute from "../../core/router/register.route";
import {
    colors,
    corsOrigin,
    DbConnexionConfig,
    dotenv,
    express,
    LoggerFormat,
    ServerEnvConfig,
    UtilityUtils,
    ServerListenUtils
} from "opticore-core-module";

export class AppServer extends ServerEnvConfig {
    public app: express.Application = express();
    public webServer = new ServerListenUtils();
    public utility = new UtilityUtils();

    public appModules = require.main?.children;
    public dateTime = `${(new Date().getMonth())}-${(new Date().getDate())}-${(new Date().getFullYear())} ${(new Date().getHours())}:${(new Date().getMinutes())}:${(new Date().getSeconds())}`;

    private port: number = this.getNumberEnv("APP_PORT");
    static host: string  = String(dotenv.config().parsed!.APP_HOST);
    static env: string   = String(dotenv.config().parsed!.ENV_DEV);

    constructor() {
        super();
        this.app.use(express.json());
        this.app.use(express.urlencoded({extended: true}));
        this.app.use(corsOrigin());
        this.app.set('view engine', 'ejs');

        this.routers();
        this.serverListen();
    }

    routers (): express.Router[] {
        return new RegisterRoute(this.app).routers();
    }

    dbConnection (): DbConnexionConfig | void {
        const logger: LoggerFormat = new LoggerFormat();
        return new DbConnexionConfig(logger).databaseMySQLConnexionConfig('');
    }

    public serverListen () {
        AppServer.host === "" && Number(this.port) === 0
            ? ((): void => {
                throw new Error(`You must set the ${colors.bgCyan(`${colors.white('host')}`)} and the ${colors.bgCyan(`${colors.white('port')}`)} in your .env to start the server.`)
            })()
            : ((): void => {
                this.dbConnection();
                const server = this.webServer.onStartEvent(this.app, AppServer.host, Number(this.port), this.appModules, this.dateTime);
                this.webServer.onListeningEvent(server, this.app, AppServer.host, Number(this.port), this.appModules, this.dateTime);
                this.webServer.onRequestEvent(server, this.app, AppServer.host, Number(this.port), this.appModules, this.dateTime);
                process.on("exit", () => {
                    console.log(`The process exist`);
                });
            })();
    }
}